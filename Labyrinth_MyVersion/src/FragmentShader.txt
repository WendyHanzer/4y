//input from the vertex shader
varying vec3 N;
varying vec3 L;
varying vec3 V;

varying vec3 f_Diffuse_Data;
varying vec3 f_Specular_Data;
varying float f_specular_power;// = 128.0;
varying vec3 f_ambient;
varying vec2 TexCoord;

//texture
uniform sampler2D texUnit;

void main() {


    vec3 fN = normalize(N);
    vec3 fL = normalize(L);
    vec3 fV = normalize(V);
    
    vec3 R = reflect(-fL, fN);

    float diff = max(0.0, dot(fN,fL));
    

        gl_FragColor = vec4(0.2, 0.3, 0.1, 1.0); 
    
    
    if (f_Diffuse_Data != vec3(0.0))
    {
        gl_FragColor += diff * vec4(f_Diffuse_Data, 1.0);
    }
    
    if (f_ambient != vec3(0.0))
    {
        gl_FragColor += vec4(f_ambient, 1.0);
    }
    
    gl_FragColor *= texture2D(texUnit, TexCoord);
    
    if (f_Specular_Data != vec3(0.0))
    {
        vec3 vReflection = normalize(reflect(-fL, fN));
       
        float spec = max(0.0, dot(fN, vReflection));
        
        if(diff != 0.0)
        {
            float fSpec = pow(spec, 128.0);
            fSpec *= 2.0;
            gl_FragColor.rgb += vec3(fSpec, fSpec, fSpec);
        }
    }


/*
    // Calculate R locally
    vec3 R = reflect(-L, N);

    // Compute the diffuse and specular components for each fragment
    vec3 diffuse = max(dot(N, L), 0.0) * diffuse_albedo;
    vec3 specular = pow(max(dot(R, V), 0.0), specular_power) * specular_albedo;

    // Write final color to the framebuffer
    color = vec4(ambient + diffuse + specular, 1.0);
*/
}

